・HttpInterceptor リクエストを飛ばす前やレスポンスを受け取った後に共通の処理を仕込めるもの (fetch API)

  → 認証が必要なリクエストを送信する際、ヘッダに「Authorization: Bearer XXXXXXXXXX」を設定したりできる。
  → パフォーマンスを向上させるために、キャッシュ動作の変更できる。

・HttpRequest、HttpResponseオブジェクトは基本的にreadonly(immutable)のため、cloneメゾットを使用する。
  最初にクローンを作成して、クローンを変更してから処理する。
・HTTPモジュールはObservaleを使用して、リクエストとレスポンスを処理する。
  Observalbe 非同期の状態を監視して、必要に応じて処理を実行する。

  → next.handle()でリクエストを転送する。 最終的にバックエンドハンドラーに流す。
  → インターセプトを実装する場合は、interceptメソッドを使用する。
    interceptメゾットはリクエストを最終的にHTTPレスポンスを含むObservableに変換する。 

・app.modul内にHTTPClientを記述。DIが可能になる。serviceのコンストラクタでhttp:httpClientを記述すれば、インスタンスの生成と同時に初期化される。
  HttpClientではJSON形式のパースがデフォルト化されている。responseType: 'text'で任意にレスポンスのフォーマットを指定できる。

・インターセプターのプロセスの最後は、サーバーとの通信を処理するHttpbackendとなる。

・Httpclient.get() : サーバーにデータをリクエストする。
  http通信でクライアントからWebサーバーへ送るリクエスト(URLで指定したファイルの送信)
  リクエストはヘッダーのみで、サーバーからの応答(レスポンス)には要求されたファイル本体などのbodyが付属する。
  サーバーに何か情報を知らせたい場合は、urlの末尾に?をつけ、続けて「パラメータ名＝値」の形式で記述する。
  「&」で区切ることで複数のパラメータを送信することが出来る。



Injectableはサービスが組み込まれる場所を指定するもの

【ライフサイクルハック】
・angular 公式ドキュメント https://angular.jp/guide/lifecycle-hooks

angularがコンポーネントクラスをインスタンス化してコンポーネントビューとその子ビューをレンダリングする時に開始される。
angularのデータがいつ変更されたかを確認して、必要に応じてビューとコンポーネントインスタンスの両方を更新するため、
ライフサイクルは変更を検知する。
コンポーネントインスタンスを破棄して、DOMを削除すると、ライフサイクルが終了する。
(インスタンスの作成〜更新〜破棄まで)

ライフサイクルフックインターフェイスを実装することで、コンポーネントのライフサイクルのイベントに応答できる。
インスタンスを作成、更新、破棄するときに適切なタイミングでコンポーネントまたはディレクティブを操作できる。
OnInitの ngOnInitメソッドを実装する。

constructorはクラスの初期化時に発火する。(componentの作成途中で発火される。)
ngOninitはコンポーネントの初期化時に発火する。


【providerの設定】
providerプロパティ：トークンを保持。依存性の確認
useClass        ：指定したクラスの新しいインスタンを作成する。
プロバイダーを設定することで、アプリケーションの必要とする部分でサービスを利用することができる。

プロバイダーにDIトークンを指定することで、そのクラスをインスタンス化させる。
コンポーネントのconstructorにサービスを指定した場合、serviceクラストークンに結びつけられたサービスを
componentに注入することができる。


【Rxjs】
非同期処理後に処理を予約するための機能(コールバック)。
Observable処理の結果を受けた後の処理をpipeやsubscribeを使って記述する。
Observable処理を定義してもsubscribeしないと実行されない(pipeを書いても同様)。
pipeはObservable処理の結果を受けて、続けてどのような処理を行うか定義する。

tap - perform side-effects notifications アラートとかの方法でなく、お知らせを通知するときにtapを使用する。 
https://rxjs-dev.firebaseapp.com/api/operators/tap


Httpのtips

・http → httpsに変更。
・キャッシュの処理。
・リクエストの進行状況の追跡と表示。
・カスタムのクッキーヘッダの名前を設定する。
・HTTPリクエストをテストする。
・エラー処理の自動化、Errors処理
・プログレスバーの自動表示
・ISO-8601文字列 → Date型変換
・loader
・Notifications
・Fake backend
・Authentication